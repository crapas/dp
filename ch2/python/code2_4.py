# 파이썬 함수에서 메모이제이션을 다루는 깔끔한 방법을 설명합니다.
# 전역 변수로 메모이제이션 변수를 선언하는 경우, 이 값을 초기화하면
# 사용하던 함수에 문제가 생기고, 초기화하지 않으면 함수를 재활용할 수
# 없습니다.

# 추천하는 방법으로 재귀호출을 최초에 호출할 때, 메모이제이션 변수를
# 딕셔너리로 초기화합니다. 파이썬 딕셔너리는 mutable 객체이므로 
# 명시적으로 반환 후 대입하지 않아도 재귀 호출 과정에서 변경된 내용이
# 그대로 저장됩니다.

# 또한 재귀 호출이 처음 시작될 때 초기화된 변수의 주소가 활용되므로
# 함수를 동시에 여러 번 사용하더라도 문제없이 동작한다는 장점도 있습니다.

# 재귀 호출 최초에 초기화 하는 방법은 메모이제이션 변수를 파라미터로
# 추가해 호출하되, 디폴트 파라미터를 None으로 설정해서
# 파라미터를 명시하지 않고 호출하는 초기 호출에서만 메모이제이션 변수를
# 초기화 할 수 있습니다.

# 아래 코드를 참고하세요.

# 메모이제이션 변수를 None 값의 기본 파라미터로 지정해서
# 이 파라미터를 지정하지 않고 호출하는 초기 호출 시점에 
# 이를 확인하고 메모이제이션 변수를 초기화 합니다.
def fibonacci(n, memo = None):
    # 초기 호출 -> 메모이제이션 변수 초기화
    # memo 딕셔너리의 키는 피보나치 수열의 순번이며, 값은 이 순번의
    # 피보나치 수열의 값입니다.
    if memo == None:
        memo = {}

    # 만약 fibonacci(n)을 이미 계산했다면 다시 계산하지 않습니다.
    # memo에 n의 값에 해당되는 키가 있다면, 이미 계산해서 저장했다는 의미가 됩니다.
    if n in memo:
        return memo[n]

    # fibonacci(n)을 계산해 이 값을 memo[n]에 저장합니다.
    if n == 1 or n == 2:
        memo[n] = 1
    else:
        # 내부에서 재귀 호출할 때는 memo를 사용해서 저장중인 값을 사용합니다.
        memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo)
    
    return memo[n]

n = int(input('숫자를 입력하세요 : '))
# 외부에서 호출 할 때는 memo를 파라미터에 사용하지 않습니다.
print('피보나치 수열의 %d번째 항은 %d입니다.' % (n, fibonacci(n)))